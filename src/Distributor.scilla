scilla_version 0

library Distributor

(* Error events *)
type Error =
  | CodeAddressNotFound
  | CodeCannotClaimNow
  | CodeInvalidTransfer

(* Constants *)
let zero = Uint128 0
let one = Uint128 1
let none = None {ByStr20}
let true = True
let zil_address = 0x0000000000000000000000000000000000000000

contract Distributor
(
  initial_owner: ByStr20
)

field balances: Map ByStr20 (Map ByStr20 Uint128) = Emp ByStr20 (Map ByStr20 Uint128)
field owner: ByStr20 = initial_owner
field pending_owner: ByStr20 = zil_address

transition TransferOwnership(
  new_owner : ByStr20
)
  ThrowUnlessSenderIsOwner;
  existing_owner <- owner;
  new_owner_is_existing_owner = builtin eq new_owner existing_owner;
  match new_owner_is_existing_owner with
  | True =>
    e = { _exception : "InvalidParameter" };
    throw e
  | False =>
    pending_owner := new_owner
  end
end

transition AcceptPendingOwnership()
  new_owner <- pending_owner;
  sender_is_pending_owner = builtin eq _sender new_owner;
  match sender_is_pending_owner with
  | False =>
    e = { _exception : "InvalidSender" };
    throw e
  | True =>
    owner := new_owner;
    pending_owner := zil_address;
    e = { _eventname: "OwnershipTransferred"; owner: new_owner };
    event e
  end
end

(* @dev: Set updated token balances *)
transition UpdateBalances()
end

(* @dev: Transfers the currently available tokens to the sender. *)
transition Claim()
  maybe_has_balance <- balances[_sender];
  match maybe_has_balance with
    | None =>
      err = CodeAddressNotFound
      ThrowError err
    | Some balance =>
      delete balances[_sender];
      (* Note: Here we'd have to convert the remaining map to a list and
      iterate over it to transfer the tokens. *)
  end
end
